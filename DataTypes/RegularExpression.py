'''
\d    匹配一个数字
\w    匹配一个字母或数字
.     匹配任何字符
*     表示任意字符
+     至少一个字符
?     表示0或1个字符
{n}   表示n个字符
{n,m} 表示n-m个字符
\d{3}\s+\d{3,8}
\d{3} 表示匹配3个数字
\s+ 表示至少有一个空格(Tab等空白符)
\d{3,8} 表示3-8个数字,

[0-9a-zA-Z\_] 匹配一个数字.字母或者下划线

[a-zA-Z\_][0-9a-zA-Z\_]

*可以匹配由字母或下划线开头，
后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}
更精确地限制了变量的长度是1-20个字符
（前面1个字符+后面最多19个字符）。

A|B   匹配A或B,所以 (P|p)thon 可以匹配'Python'或者'python'。
^     行头,表示 ^\d表示必须以数字开头
$     表示行结束 \d$表示必须以数字结束

s = 'ABC\\-001' # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'
因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：

s = r'ABC\-001'
 Python的字符串
 对应的正则表达式字符串不变：
 'ABC\-001'

'''

import re
print(re.match(r'\d{3}\-\d{3,8}$','010-12345'))
'''

test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')
'''

#切分
print('a b  c'.split(' '))
print(re.split(r'\s+','a  b     c'))
print(re.split(r'[\s\,]+', 'a,b, c,  b,'))
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m.group(0))
print(m.group(1))
print(m.group(2))

'''
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。

必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：

>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')
'''

'''

如果一个正则表达式要重复使用几千次，出于效率的考虑，
我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：

>>> import re
# 编译:
>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
>>> re_telephone.match('010-12345').groups()
('010', '12345')
>>> re_telephone.match('010-8086').groups()
('010', '8086')

'''

